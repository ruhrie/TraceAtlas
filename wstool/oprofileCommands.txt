17 20  49.73 30.91 41.47 21.85
17 50  49.77 31.00 41.49 21.87
19 20 49.88 31.25  41.55 21.92

1922 82.14  52.49 43.07 23.28
1932 82.43


dag extractor 看kernel 的life 释放内存


2317 3405 5306 6304 2516 4501
028   3435 5368 6338 2525 4510
121   3456 5413 6363 2530 4517
854   3563  5636 6484 2560 4549
1709 3680 5845 2180 2593 4585


1  = 15
3 = 45
7 = 105
15 = 225
31=465


begin time end time 接口for blocks 不同的block组合 update不同的begin endtime


"Kernels":{"0"[0,4,8,12,16,17,18,19,20,21,22,23,24,25,26,27,28,32,33,34,35,39,41,42,43,44,45,46,47,48,49,50,52,54,55,60,61,62,63,64,68,69,70,74,78,82,83,84,86,87,88,90,91,102,103,107,109,113,117,118,119,120,121,122,124,126,127,138,139,140,141,142,148,149,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,323,325,326,327,328,329,330,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2098,2100,2102,2103,2104,2105,2106,2107,2108,2109,2110,2116,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150],

"1":{"Blocks":[17,18,19,20,21,22,23,24,25,26,27]
"10":{"Blocks":[2074,2075,2076],
"11":{"Blocks":[2079,2080,2081],
"12":{"Blocks":[2084,2085,2086]
"13":{"Blocks":[2088,2089,2090],
"14":{"Blocks":[2092,2093,2094],"
"15":{"Blocks":[2104,2107,2108,2109],
"16":{"Blocks":[2124,2125,2126],"
"17":{"Blocks":[2128,2129,2130],
"18":{"Blocks":[2136,2137,2138],
"19":{"Blocks":[2140,2141,2142],
"2":{"Blocks":[19,20,21,22,23,24,25],
"20":{"Blocks":[2144,2145,2146,2147,2148],"Label":""},
"3":{"Blocks":[21,22,23],"Label":
"4":{"Blocks":[42,43,44,45,46,47,48],"
"5":{"Blocks":[61,62,63],


"6":{"Blocks":[118,119,120,121,122,124,126,127,138,139,140,141,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194],[float64][256]"},   node with largest number of blocks

 finish all these  procuder  then release these memory 
"7":{"Blocks":[181,182,183,184,185,186,187,188,189,190,191,192,193],
"8":{"Blocks":[189,190,191]

1 给每个application 画图

2 5 6 
kernel 7 8 9 -> kernel 3 .. .


2。这个updating method 举列子
{
address 
begin time
end time
}


kernel life time


从并行处理 到串行处理kernels 串行处理的顺序怎么弄









code
profile 
psedo
memory
comments
10:30























kernel 1: Block[1,2]

kernel 2: Block[1,2,3,4]

trace file Block[1,2,1,2,1,2,3,4,1,2,3,4,1,2]
//===================================
kernel 1:
{
address:0001 begin: 0  end: 100
address:0002 begin: 0  end: 5
address:0003 begin: 0  end: 5
}

kernel 2:
{
address:0001 begin: 4  end: 8
address:0002 begin: 3  end: 9
address:0003 begin: 6  end: 10
}







//===================================
block1:
{
address:0001 begin: 0  end: 100
address:0002 begin: 0  end: 5
address:0003 begin: 0  end: 5
}

block2:
{
address:0001 begin: 4  end: 8
address:0002 begin: 3  end: 9
address:0003 begin: 6  end: 10
}

block3:
{
address:0001 begin: 10  end: 50
address:0002 begin: 20  end: 30
address:0003 begin: 40  end: 60
}

block4:
{
address:0001 begin: 20  end: 60
address:0002 begin: 25  end: 55
address:0003 begin: 39  end: 61
}

//===================================



store id table=---》 block  

data structure in psedocode


10 30 to noon friday




step1: put all addresses into a set

step2: for each address 

2.1: compare the begin time
2.2 compare the end time
have overlap then merge, otherwise start a new struct
input/output address same as before


pro


gcc -o he conf.c -L /home/lchang21/llvm-dev/ppop/popt/build/lib/ -lpopt
gcc -o he conf.c -lpopt


1,pseducode
2,profiling
3, slides show trace times/memory usage/ time consuming one applicaition
4, add comments



export LIBRARY_PATH=/home/lchang21/llvm-dev/ppop/popt/build/lib/:$LIBRARY_PATH


./configure -–prefix=/home/lchang21/llvm-dev/binutils/binutils-gdb/build


/home/lchang21/llvm-dev/binusffffff/binutils-2.34

/home/lchang21/llvm-dev/binusffffff/binutils-2.34/build/lib
export LIBRARY_PATH=/home/lchang21/llvm-dev/binusffffff/binutils-2.34/build/lib:$LIBRARY_PATH
export LIBRARY_PATH=/home/lchang21/llvm-dev/binutils/binutils-gdb/libiberty:$LIBRARY_PATH
export PATH=/home/lchang21/llvm-dev/binutils/binutils-gdb/libiberty:$PATH
binutils/binutils-gdb/libiberty/

code
profile
psedocode
performance
slides



ISA independent workload characterastic

isaind


profile try applications


cmake ../ -D
./vcpkg/installed/x64-linux/share/nlohmann_json/nlohmann_jsonConfig.cmake
./vcpkg/buildtrees/nlohmann-json/x64-linux-rel/nlohmann_jsonConfig.cmake
./vcpkg/buildtrees/nlohmann-json/x64-linux-dbg/nlohmann_jsonConfig.cmake
./vcpkg/packages/nlohmann-json_x64-linux/share/nlohmann_json/nlohmann_jsonConfig.cmake
export CMAKE_PREFIX_PATH=../vcpkg/installed/x64-linux/share/nlohmann_json/nlohmann_jsonConfig.cmake
cmake ../ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="../vcpkg/packages/nlohmann-json_x64-linux/share/nlohmann_json/nlohmann_jsonConfig.cmake;../vcpkg/buildtrees/nlohmann-json/x64-linux-dbg/nlohmann_jsonConfig.cmake;../vcpkg/buildtrees/nlohmann-json/x64-linux-rel/nlohmann_jsonConfig.cmake;../vcpkg/installed/x64-linux/share/nlohmann_json/nlohmann_jsonConfig.cmake"

export CMAKE_PREFIX_PATH=../vcpkg/installed/x64-linux/share/indica/
cmake -B./ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++-9 -DCMAKE_C_COMPILER=clang-9



/home/lchang21/llvm-dev/wsInfrastructure/TraceAtlas/build/bin/cartographer -i ./raw.trc -k ./kernel.json -b ./1DBlur-L --nb


export PATH=/usr/lib/x86_64-linux-gnu/debug/:$PATH

sudo operf ./../bin/wstool -i raw.trc -k kernel.json -ki 0
/usr/lib/x86_64-linux-gnu/debug/libstdc++.so.6.0.28
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/debug/libstdc++.so.6.0.28
/============================
Oprofile： single process or system wide
cache miss 和mmx 这个很有用的@@@ MMX operations.
